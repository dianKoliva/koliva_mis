{
  "swagger": "2.0",
  "info": {
    "version": "1.0.4",
    "title": "KM APIs Documention",
    "description": "KM APIS",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:4000",
  "basePath": "/km",
  "tags": [
    {
      "name": "Users",
      "description": "API for users"
    },
    {
      "name": "Forms",
      "description": "API for forms"
    }
  ],
  "schemes": ["https", "http"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/users/signup": {
      "post": {
        "tags": ["Users"],
        "summary": "User signup",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to create",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "New user registered!",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "Sign in",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User credentials",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "required": ["email", "password"]
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "User authenticated.",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "string"
        },
        {
          "name": "Authorization",
          "in": "header",
          "description": "Authentication token",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Users"],
        "summary": "Get user with given ID",
        "responses": {
          "200": {
            "description": "User is found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user with given ID",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "User is deleted",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "put": {
        "summary": "Update user with give ID",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User with new values of properties",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is updated",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authentication token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },

    "/forms/regret": {
      "post": {
        "tags": ["Forms"],
        "summary": "Form registration",
        "parameters": [
          {
            "name": "form",
            "in": "body",
            "description": "Form that we want to create",
            "schema": {
              "$ref": "#/definitions/Form"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "New form registered!",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/forms/register": {
      "get": {
        "tags": ["Forms"],
        "summary": "Get forms.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authentication token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    }
    ,  "/forms/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of form that we want to find",
          "type": "string"
        },
        {
          "name": "Authorization",
          "in": "header",
          "description": "Authentication token",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Forms"],
        "summary": "Get form with given ID",
        "responses": {
          "200": {
            "description": "Form is found",
            "schema": {
              "$ref": "#/definitions/Form"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Form with given ID",
        "tags": ["Forms"],
        "responses": {
          "200": {
            "description": "Form is deleted",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "put": {
        "summary": "Update form with give ID",
        "tags": ["Forms"],
        "parameters": [
          {
            "name": "form",
            "in": "body",
            "description": "Form with new values of properties",
            "schema": {
              "$ref": "#/definitions/Form"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Form is updated",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    }
    
  },
  "definitions": {
    "User": {
      "required": [
        "email",
        "name",
        "password"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "uniqueItems": true
        }
      }
    },
  
    "Form": {
      "required": [
        "plate_no","type", "brand", "chassis_no",

        "chassis_quantity","screw_quantity","baguette_quantity",
        "disk_quantity","paint_quantity","ressort_quantity",

        "chassis_up","screw_up","baguette_up","disk_up","paint_up",
        "ressort_up"," total"
      ],

      "properties": {
        "plate_no": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "brand": {
          "type": "string"
        },
        "chassis_no": {
          "type": "string"
        },

        

        "chassis_quantity": {
          "type": "Number"
        },
        "screw_quantity": {
          "type": "Number"
        },
        "baguette_quantity": {
          "type": "Number"
        },
        "disk_quantity": {
          "type": "Number"
        },
        "paint_quantity": {
          "type": "Number"
        },
        "ressort_quantity": {
          "type": "Number"
        },



        "chassis_up": {
          "type": "Number"
        },
        "screw_up": {
          "type": "Number"
        },
        "baguette_up": {
          "type": "Number"
        },
        "disk_up": {
          "type": "Number"
        },
        "paint_up": {
          "type": "Number"
        },
        "ressort_up": {
          "type": "Number"
        },
        "total": {
          "type": "Number"
        }

      }
    }

  }
  

}
